# -*- coding: utf-8 -*-
"""
Defines data structures for representing a structured workflow plan.

This plan is typically generated by the WorkflowParserAgent and consumed by
the OrchestratorAgent to guide the execution flow.

Relevant ADK Classes:
- (These are primarily standard Python data classes or Pydantic models, not directly ADK classes)
"""

from typing import List, Dict, Any, Optional, Literal
from dataclasses import dataclass, field

# Using dataclasses for simplicity, Pydantic could also be used for validation

@dataclass
class WorkflowStep:
    """Represents a single step in the workflow plan."""
    step_id: str
    step_type: Literal["collect", "classify", "execute", "validate", "loop", "notify"] # Example types
    description: str
    agent_name: str # Name of the agent responsible (e.g., "DataCollectorAgent", "ExpertAgent")
    input_keys: List[str] = field(default_factory=list) # State keys needed as input
    output_keys: List[str] = field(default_factory=list) # State keys this step will produce
    tool_name: Optional[str] = None # Specific tool to use, if applicable
    parameters: Dict[str, Any] = field(default_factory=dict) # Specific parameters for the step/tool
    next_step_id: Optional[str] = None # ID of the next step in sequence
    # Add fields for conditional branching if needed later

@dataclass
class WorkflowPlan:
    """Represents the overall structured workflow plan."""
    plan_id: str
    description: str
    steps: List[WorkflowStep] = field(default_factory=list)
    start_step_id: Optional[str] = None

    def get_step_by_id(self, step_id: str) -> Optional[WorkflowStep]:
        """Helper method to find a step by its ID."""
        for step in self.steps:
            if step.step_id == step_id:
                return step
        return None

# --- Example Usage (for testing/reference) ---
# if __name__ == '__main__':
#     # Example plan for adding a Notion task
#     notion_plan = WorkflowPlan(
#         plan_id="notion_add_task_v1",
#         description="Standard workflow to collect, validate, and add a task to Notion.",
#         start_step_id="collect_details"
#     )
#
#     notion_plan.steps.append(WorkflowStep(
#         step_id="collect_details",
#         step_type="loop", # Use the interactive loop agent
#         description="Interactively collect task details (name, status, priority, due date).",
#         agent_name="DetailCollectorLoop",
#         input_keys=[], # Loop agent manages its own state initially
#         output_keys=["task_name", "status", "priority", "due_date", "details"], # Keys the loop aims to fill
#         next_step_id="validate_details"
#     ))
#
#     notion_plan.steps.append(WorkflowStep(
#         step_id="validate_details",
#         step_type="validate",
#         description="Expert review of collected task details.",
#         agent_name="ExpertAgent", # Assuming an expert for task definition quality
#         input_keys=["task_name", "status", "priority", "due_date", "details"],
#         output_keys=["expert_assessment"], # e.g., {'status': 'approved', 'feedback': '...'}
#         next_step_id="write_to_notion" # TODO: Add conditional logic based on validation status
#     ))
#
#     notion_plan.steps.append(WorkflowStep(
#         step_id="write_to_notion",
#         step_type="execute",
#         description="Write the validated task details to Notion.",
#         agent_name="NotionWriterAgent",
#         input_keys=["task_name", "status", "priority", "due_date", "details", "expert_assessment"],
#         output_keys=["notion_page_id"],
#         tool_name="add_task_to_notion_database", # Specific tool for the agent
#         next_step_id=None # End of plan
#     ))
#
#     print(f"Example Workflow Plan: {notion_plan}")
#     start_step = notion_plan.get_step_by_id(notion_plan.start_step_id)
#     print(f"\nStarting Step ({notion_plan.start_step_id}): {start_step}")
